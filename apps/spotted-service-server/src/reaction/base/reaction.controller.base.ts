/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReactionService } from "../reaction.service";
import { ReactionCreateInput } from "./ReactionCreateInput";
import { Reaction } from "./Reaction";
import { Post } from "../../post/base/Post";
import { ReactionFindManyArgs } from "./ReactionFindManyArgs";
import { ReactionWhereUniqueInput } from "./ReactionWhereUniqueInput";
import { ReactionUpdateInput } from "./ReactionUpdateInput";

export class ReactionControllerBase {
  constructor(protected readonly service: ReactionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Reaction })
  async createReaction(
    @common.Body() data: ReactionCreateInput
  ): Promise<Reaction> {
    return await this.service.createReaction({
      data: {
        ...data,

        comment: data.comment
          ? {
              connect: data.comment,
            }
          : undefined,

        post: data.post
          ? {
              connect: data.post,
            }
          : undefined,
      },
      select: {
        author: true,

        comment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        post: {
          select: {
            id: true,
          },
        },

        reactionType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Reaction] })
  @ApiNestedQuery(ReactionFindManyArgs)
  async reactions(@common.Req() request: Request): Promise<Reaction[]> {
    const args = plainToClass(ReactionFindManyArgs, request.query);
    return this.service.reactions({
      ...args,
      select: {
        author: true,

        comment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        post: {
          select: {
            id: true,
          },
        },

        reactionType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Reaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reaction(
    @common.Param() params: ReactionWhereUniqueInput
  ): Promise<Reaction | null> {
    const result = await this.service.reaction({
      where: params,
      select: {
        author: true,

        comment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        post: {
          select: {
            id: true,
          },
        },

        reactionType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Reaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReaction(
    @common.Param() params: ReactionWhereUniqueInput,
    @common.Body() data: ReactionUpdateInput
  ): Promise<Reaction | null> {
    try {
      return await this.service.updateReaction({
        where: params,
        data: {
          ...data,

          comment: data.comment
            ? {
                connect: data.comment,
              }
            : undefined,

          post: data.post
            ? {
                connect: data.post,
              }
            : undefined,
        },
        select: {
          author: true,

          comment: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          post: {
            select: {
              id: true,
            },
          },

          reactionType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Reaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReaction(
    @common.Param() params: ReactionWhereUniqueInput
  ): Promise<Reaction | null> {
    try {
      return await this.service.deleteReaction({
        where: params,
        select: {
          author: true,

          comment: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          post: {
            select: {
              id: true,
            },
          },

          reactionType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
