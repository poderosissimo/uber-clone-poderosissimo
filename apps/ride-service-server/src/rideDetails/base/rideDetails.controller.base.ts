/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RideDetailsService } from "../rideDetails.service";
import { RideDetailsCreateInput } from "./RideDetailsCreateInput";
import { RideDetails } from "./RideDetails";
import { RideDetailsFindManyArgs } from "./RideDetailsFindManyArgs";
import { RideDetailsWhereUniqueInput } from "./RideDetailsWhereUniqueInput";
import { RideDetailsUpdateInput } from "./RideDetailsUpdateInput";

export class RideDetailsControllerBase {
  constructor(protected readonly service: RideDetailsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RideDetails })
  async createRideDetails(
    @common.Body() data: RideDetailsCreateInput
  ): Promise<RideDetails> {
    return await this.service.createRideDetails({
      data: {
        ...data,

        rideRequest: data.rideRequest
          ? {
              connect: data.rideRequest,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        distance: true,
        endTime: true,
        feedback: true,
        id: true,

        rideRequest: {
          select: {
            id: true,
          },
        },

        startTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RideDetails] })
  @ApiNestedQuery(RideDetailsFindManyArgs)
  async rideDetailsItems(
    @common.Req() request: Request
  ): Promise<RideDetails[]> {
    const args = plainToClass(RideDetailsFindManyArgs, request.query);
    return this.service.rideDetailsItems({
      ...args,
      select: {
        createdAt: true,
        distance: true,
        endTime: true,
        feedback: true,
        id: true,

        rideRequest: {
          select: {
            id: true,
          },
        },

        startTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RideDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rideDetails(
    @common.Param() params: RideDetailsWhereUniqueInput
  ): Promise<RideDetails | null> {
    const result = await this.service.rideDetails({
      where: params,
      select: {
        createdAt: true,
        distance: true,
        endTime: true,
        feedback: true,
        id: true,

        rideRequest: {
          select: {
            id: true,
          },
        },

        startTime: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RideDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRideDetails(
    @common.Param() params: RideDetailsWhereUniqueInput,
    @common.Body() data: RideDetailsUpdateInput
  ): Promise<RideDetails | null> {
    try {
      return await this.service.updateRideDetails({
        where: params,
        data: {
          ...data,

          rideRequest: data.rideRequest
            ? {
                connect: data.rideRequest,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          distance: true,
          endTime: true,
          feedback: true,
          id: true,

          rideRequest: {
            select: {
              id: true,
            },
          },

          startTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RideDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRideDetails(
    @common.Param() params: RideDetailsWhereUniqueInput
  ): Promise<RideDetails | null> {
    try {
      return await this.service.deleteRideDetails({
        where: params,
        select: {
          createdAt: true,
          distance: true,
          endTime: true,
          feedback: true,
          id: true,

          rideRequest: {
            select: {
              id: true,
            },
          },

          startTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
