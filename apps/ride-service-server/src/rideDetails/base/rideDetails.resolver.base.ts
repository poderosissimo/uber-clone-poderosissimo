/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RideDetails } from "./RideDetails";
import { RideDetailsCountArgs } from "./RideDetailsCountArgs";
import { RideDetailsFindManyArgs } from "./RideDetailsFindManyArgs";
import { RideDetailsFindUniqueArgs } from "./RideDetailsFindUniqueArgs";
import { CreateRideDetailsArgs } from "./CreateRideDetailsArgs";
import { UpdateRideDetailsArgs } from "./UpdateRideDetailsArgs";
import { DeleteRideDetailsArgs } from "./DeleteRideDetailsArgs";
import { RideRequest } from "../../rideRequest/base/RideRequest";
import { RideDetailsService } from "../rideDetails.service";
@graphql.Resolver(() => RideDetails)
export class RideDetailsResolverBase {
  constructor(protected readonly service: RideDetailsService) {}

  async _rideDetailsItemsMeta(
    @graphql.Args() args: RideDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RideDetails])
  async rideDetailsItems(
    @graphql.Args() args: RideDetailsFindManyArgs
  ): Promise<RideDetails[]> {
    return this.service.rideDetailsItems(args);
  }

  @graphql.Query(() => RideDetails, { nullable: true })
  async rideDetails(
    @graphql.Args() args: RideDetailsFindUniqueArgs
  ): Promise<RideDetails | null> {
    const result = await this.service.rideDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RideDetails)
  async createRideDetails(
    @graphql.Args() args: CreateRideDetailsArgs
  ): Promise<RideDetails> {
    return await this.service.createRideDetails({
      ...args,
      data: {
        ...args.data,

        rideRequest: args.data.rideRequest
          ? {
              connect: args.data.rideRequest,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RideDetails)
  async updateRideDetails(
    @graphql.Args() args: UpdateRideDetailsArgs
  ): Promise<RideDetails | null> {
    try {
      return await this.service.updateRideDetails({
        ...args,
        data: {
          ...args.data,

          rideRequest: args.data.rideRequest
            ? {
                connect: args.data.rideRequest,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RideDetails)
  async deleteRideDetails(
    @graphql.Args() args: DeleteRideDetailsArgs
  ): Promise<RideDetails | null> {
    try {
      return await this.service.deleteRideDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => RideRequest, {
    nullable: true,
    name: "rideRequest",
  })
  async getRideRequest(
    @graphql.Parent() parent: RideDetails
  ): Promise<RideRequest | null> {
    const result = await this.service.getRideRequest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
