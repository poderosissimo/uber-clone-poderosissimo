/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RideDetails as PrismaRideDetails,
  RideRequest as PrismaRideRequest,
} from "@prisma/client";

export class RideDetailsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RideDetailsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.rideDetails.count(args);
  }

  async rideDetailsItems<T extends Prisma.RideDetailsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideDetailsFindManyArgs>
  ): Promise<PrismaRideDetails[]> {
    return this.prisma.rideDetails.findMany<Prisma.RideDetailsFindManyArgs>(
      args
    );
  }
  async rideDetails<T extends Prisma.RideDetailsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideDetailsFindUniqueArgs>
  ): Promise<PrismaRideDetails | null> {
    return this.prisma.rideDetails.findUnique(args);
  }
  async createRideDetails<T extends Prisma.RideDetailsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideDetailsCreateArgs>
  ): Promise<PrismaRideDetails> {
    return this.prisma.rideDetails.create<T>(args);
  }
  async updateRideDetails<T extends Prisma.RideDetailsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideDetailsUpdateArgs>
  ): Promise<PrismaRideDetails> {
    return this.prisma.rideDetails.update<T>(args);
  }
  async deleteRideDetails<T extends Prisma.RideDetailsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideDetailsDeleteArgs>
  ): Promise<PrismaRideDetails> {
    return this.prisma.rideDetails.delete(args);
  }

  async getRideRequest(parentId: string): Promise<PrismaRideRequest | null> {
    return this.prisma.rideDetails
      .findUnique({
        where: { id: parentId },
      })
      .rideRequest();
  }
}
