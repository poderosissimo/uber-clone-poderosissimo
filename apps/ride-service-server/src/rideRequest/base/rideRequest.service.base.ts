/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RideRequest as PrismaRideRequest,
  RideDetails as PrismaRideDetails,
} from "@prisma/client";

export class RideRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RideRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.rideRequest.count(args);
  }

  async rideRequests<T extends Prisma.RideRequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideRequestFindManyArgs>
  ): Promise<PrismaRideRequest[]> {
    return this.prisma.rideRequest.findMany<Prisma.RideRequestFindManyArgs>(
      args
    );
  }
  async rideRequest<T extends Prisma.RideRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideRequestFindUniqueArgs>
  ): Promise<PrismaRideRequest | null> {
    return this.prisma.rideRequest.findUnique(args);
  }
  async createRideRequest<T extends Prisma.RideRequestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideRequestCreateArgs>
  ): Promise<PrismaRideRequest> {
    return this.prisma.rideRequest.create<T>(args);
  }
  async updateRideRequest<T extends Prisma.RideRequestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideRequestUpdateArgs>
  ): Promise<PrismaRideRequest> {
    return this.prisma.rideRequest.update<T>(args);
  }
  async deleteRideRequest<T extends Prisma.RideRequestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideRequestDeleteArgs>
  ): Promise<PrismaRideRequest> {
    return this.prisma.rideRequest.delete(args);
  }

  async findRideDetailsItems(
    parentId: string,
    args: Prisma.RideDetailsFindManyArgs
  ): Promise<PrismaRideDetails[]> {
    return this.prisma.rideRequest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rideDetailsItems(args);
  }
}
